"""
File containing the main function analysis
"""
from src.analyse_files import *
from src.analyse_definitions import *

def file_latex_macro(cmd, code):
    """
    Generation of the Latex command
    """
    return "\n\\newcommand" + cmd + "[3]{\n" + code + "\n}\n\n"

def write_latex_macro(file, data):
    """
    Generate the Latex commands for the files and the definitions
    """
    if 'function_code' in data:
        file.write(file_latex_macro(file_cite(), data['function_code']))
    else:
        print("[Error] Expeted function_code")
        exit(1)

    if 'def_code' in data:
        file.write(file_latex_macro(def_cite(), data['def_code']))
    else:
        print("[Error] Expeted function_code")
        exit(1)

def analyse(data):
    """
    Analysis of the project
    """
    # Testing if the configuration file contains the required information
    if 'base_url' not in data:
        print("[Error] Impossible to read the field \'base_url\'")
        exit(1)

    if 'project_path' not in data:
        print("[Error] Impossible to read the field \'project_path\'")
        exit(1)

    if 'output_file' not in data:
        print("[Error] Impossible to read the field \'base_url\'")
        exit(1)

    # Open output file
    try:
        f = open(data['output_file'], 'w')
        f.write("% This file is automatically generated by projectToLatexRef\n\n")

    except:
        print("Could not open {} output file...".format(data['output_file']))
        exit(1)

    if 'disable_macro' not in data or (not bool(data['disable_macro'])):
        write_latex_macro(f, data)

    # Analyse part
    if 'files' in data:
        analyse_file_names(f, data)

    if 'definitions' in data:
        analyse_definitons(f, data)
        f.close()

